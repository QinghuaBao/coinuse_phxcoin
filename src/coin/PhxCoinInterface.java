package coin;

import com.google.protobuf.InvalidProtocolBufferException;
import org.json.JSONObject;

import java.io.IOException;
import java.net.HttpURLConnection;

public interface PhxCoinInterface{
    /**
     * @Description: App use this interface to get invoke parameters which will be delivered to backend later.
     *               获得转账参数
     * @param: fromAddr     :   fromAddress
     *          toAddr      :   toAddress
     *          value       :   coin amount， precision two decimal
     *          founder     :   can not be null! the founder of this transaction
     *          until       :   timestamp, coin can not be spent until 'until'
     *          pubstring   :   base64 of public key
     *          pristring   :   base64 of private key
     * @return: String parameter
     */
    public String getTransferParam(String fromAddr, String toAddr, long value, String founder, long until, String pubstring, String pristring) throws IOException;
    /**
     * @Description: 使用utxo作为参数获得转账参数
     * @param res
     * @param des
     * @param value
     * @param founder
     * @param until
     * @param pubstring
     * @param pristring
     * @return
     * @throws InvalidProtocolBufferException
     */
    public String generateTransferInvokeParam(String res, String des, long value, String founder, long until,
                                              String pubstring, String pristring)throws InvalidProtocolBufferException;
    /**
     * @Description: App/Backend use this to generate transaction hash that will be used for getting history of transactions later.
     * 				 根据转账参数获得交易hashcode
     * @param:  parameter generated by getTransferParam()
     * @return: transaction hash (hex string)
     */
    public String getTxHash(String param)throws IOException;

    /**
     * @Description: Backend use this to invoke blockchain functions to do transfer.
     *               提交转账请求
     * @param:  parameter generated by getTransferParam()
     * @return:
     */
    public String doTransferByParam(String param) throws IOException;

    /**
     * @Description: get first transfer param
     *               获得utxo参数
     * @param addr account's address
     * @return string
     * @throws IOException
     *
     * wzt 2017-07-12 12:33:08
     */
    public String getResParam(String addr)throws IOException;

    /**
     * @Description: get account information
     *                得到账户信息
     * @param: account's address
     * @return:
     * {
     *     "addr":  account's address
     *     "txouts_count":  number of txout the account owns
     *     "balance":   balance
     *     "txouts":    array of txout
     * }
     */
    public String getAccountInfo(String addr)throws IOException;

    /**
     * @Description: 获得账户余额
     * @param addr
     * @return
     * @throws IOException
     *
     * wzt 2017-07-27 16:00:36
     */
    public Long getAccountBalance(String addr)throws IOException;

    /**
     * @Description: get account's all txout (not use)
     * @param addr
     * @return
     * @throws IOException
     *
     * wzt 2017-07-27 16:00:38
     */
    public int getTxoutCount(String addr)throws IOException;

    /**
     * @Description: get account's txout (not use)
     * @param addr
     * @param num
     * @return
     * @throws IOException
     *
     * wzt 2017-07-27 16:00:40
     */
    public String getAccountTxout(String addr, int num)throws IOException;

    /**
     * @Description: get detail information about a historical transaction
     * @param:  transaction hash
     * @return: {
     *     "txins":[{"sourceHash": last txout's hash
     *              "index":
     *              "addr": sender's address
     *              "script":   sender's signed information about this tx.
     *              "undefined":    not used now
     *     }],
     *     "founder":   founder of this tx
     *     "txouts":[{"scriptPubKey":   will be used to generate address,
     *                "until":
     *                "addr":
     *                "value":
     *                "undefined":  the public key of sender
     *     }],
     *     "version":   1
     *     "timestamp":
     *     "
     * }
     */
    public String getTransaction(String txHash) throws IOException;
    public JSONObject genertateAccountInfo(String res) throws InvalidProtocolBufferException;
    public HttpURLConnection connectToBlockChain() throws IOException;
    public String getPhxCoinInfo() throws IOException;
    public String getReturnJson();
    public String doCoinbase(String addr, String pubKey, long value, long until)throws IOException;
    public void setADD_URL(String ADD_URL);
}